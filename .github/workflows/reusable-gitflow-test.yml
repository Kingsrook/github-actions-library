# =============================================================================
# REUSABLE GITFLOW TEST WORKFLOW
# =============================================================================
# This workflow provides standardized testing for feature branches and PRs
# across all QQQ repositories. It implements the DRY principle by centralizing
# all testing logic in one reusable workflow.
#
# USAGE:
#   - uses: Kingsrook/github-actions-library/.github/workflows/reusable-gitflow-test@main
#   - with:
#       project-type: 'hybrid'        # maven, npm, or hybrid
#       java-version: '17'           # Java version for Maven projects
#       node-version: '18'           # Node.js version for NPM projects
#       maven-args: ''               # Additional Maven arguments
#       npm-args: ''                 # Additional NPM arguments
#       maven-working-directory: '.' # Working directory for Maven project
#       npm-working-directory: '.'   # Working directory for NPM project
#
# WORKFLOW STEPS:
#   1. Environment Validation - Validates all required secrets and configurations
#   2. Matrix Testing - Runs tests for Maven and/or NPM projects based on type
#   3. Test Execution - Runs tests, linting, and coverage for each project type
#   4. Artifact Collection - Uploads test results and coverage reports
#
# BRANCH TRIGGERS:
#   - develop, main, release/*, hotfix/*, feature/* branches
#   - Pull requests to develop and main
# =============================================================================

name: 'Reusable GitFlow Test Workflow'

on:
  workflow_call:
    inputs:
      project-type:
        description: 'Type of project (maven, npm, or hybrid)'
        required: true
        type: string
        default: 'hybrid'
      java-version:
        description: 'Java version to use'
        required: false
        type: string
        default: '17'
      node-version:
        description: 'Node.js version to use'
        required: false
        type: string
        default: '18'
      maven-args:
        description: 'Additional Maven arguments'
        required: false
        type: string
        default: ''
      npm-args:
        description: 'Additional NPM arguments'
        required: false
        type: string
        default: ''
      maven-working-directory:
        description: 'Working directory for Maven project'
        required: false
        type: string
        default: '.'
      npm-working-directory:
        description: 'Working directory for NPM project'
        required: false
        type: string
        default: '.'
    secrets:
      GPG_PRIVATE_KEY_B64:
        required: false
      GPG_KEYNAME:
        required: false
      GPG_PASSPHRASE:
        required: false
      CENTRAL_USERNAME:
        required: false
      CENTRAL_PASSWORD:
        required: false
      NPM_TOKEN:
        required: false

jobs:
  # ========================================================================
  # JOB 1: ENVIRONMENT VALIDATION
  # ========================================================================
  # This job runs first and validates all required environment variables,
  # secrets, and configurations. It's designed to fail fast if there are
  # any authentication or configuration issues.
  validate-environment:
    name: 'üîç Validate Environment'
    runs-on: ubuntu-latest
    steps:
      - name: 'Checkout code'
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 'üîç Environment Validation Started'
        run: |
          echo "=========================================="
          echo "üîç ENVIRONMENT VALIDATION STARTED"
          echo "=========================================="
          echo "Project Type: ${{ inputs.project-type }}"
          echo "=========================================="
        shell: bash

      - name: '‚úÖ Validate GPG Secrets'
        if: contains(inputs.project-type, 'maven') || contains(inputs.project-type, 'npm')
        run: |
          echo "üîê Validating GPG configuration..."
          
          # Check GPG_PRIVATE_KEY_B64
          if [ -z "${{ secrets.GPG_PRIVATE_KEY_B64 }}" ]; then
            echo ""
            echo "‚ùå CRITICAL ERROR: GPG_PRIVATE_KEY_B64 secret is missing!"
            echo ""
            echo "üîß HOW TO FIX:"
            echo "   This secret is required for GPG signing of artifacts."
            echo "   You need to add it to your repository secrets."
            echo ""
            echo "üìã REQUIRED SECRETS:"
            echo "   ‚úì GPG_PRIVATE_KEY_B64 - Your GPG private key in base64 format"
            echo "   ‚úì GPG_KEYNAME - The email or key ID associated with your GPG key"
            echo "   ‚úì GPG_PASSPHRASE - The passphrase for your GPG key"
            echo ""
            echo "üîë HOW TO GET YOUR GPG KEY:"
            echo "   1. Export your GPG private key: gpg --export-secret-key --armor your-email@example.com"
            echo "   2. Convert to base64: echo 'YOUR_PRIVATE_KEY_CONTENT' | base64 -w 0"
            echo "   3. Add to repository secrets: Settings > Secrets and variables > Actions"
            echo ""
            exit 1
          fi
          
          # Check GPG_KEYNAME
          if [ -z "${{ secrets.GPG_KEYNAME }}" ]; then
            echo ""
            echo "‚ùå CRITICAL ERROR: GPG_KEYNAME secret is missing!"
            echo ""
            echo "üîß HOW TO FIX:"
            echo "   Add GPG_KEYNAME to your repository secrets."
            echo ""
            echo "üìã WHAT TO ADD:"
            echo "   - The email address associated with your GPG key, OR"
            echo "   - The key ID (e.g., 12345678ABCDEF12)"
            echo ""
            echo "üîë HOW TO FIND YOUR KEY NAME:"
            echo "   Run: gpg --list-secret-keys --keyid-format LONG"
            echo "   Look for the email or key ID in the output"
            echo ""
            exit 1
          fi
          
          # Check GPG_PASSPHRASE
          if [ -z "${{ secrets.GPG_PASSPHRASE }}" ]; then
            echo ""
            echo "‚ùå CRITICAL ERROR: GPG_PASSPHRASE secret is missing!"
            echo ""
            echo "üîß HOW TO FIX:"
            echo "   Add GPG_PASSPHRASE to your repository secrets."
            echo ""
            echo "üìã WHAT TO ADD:"
            echo "   - The passphrase you set when creating your GPG key"
            echo "   - If you don't remember it, you may need to create a new GPG key"
            echo ""
            echo "üîë HOW TO CREATE A NEW GPG KEY:"
            echo "   1. Run: gpg --full-generate-key"
            echo "   2. Choose RSA and RSA (default)"
            echo "   3. Choose 4096 bits"
            echo "   4. Set an expiration date"
            echo "   5. Enter your name and email"
            echo "   6. Set a passphrase (remember this!)"
            echo ""
            exit 1
          fi
          
          echo "‚úÖ GPG secrets are present"
          echo "   Key Name: ${{ secrets.GPG_KEYNAME }}"
          echo "   Private Key: [PRESENT]"
          echo "   Passphrase: [PRESENT]"
        shell: bash

      - name: '‚úÖ Validate Maven Central Secrets'
        if: contains(inputs.project-type, 'maven')
        run: |
          echo "üì¶ Validating Maven Central configuration..."
          
          # Check CENTRAL_USERNAME
          if [ -z "${{ secrets.CENTRAL_USERNAME }}" ]; then
            echo ""
            echo "‚ùå CRITICAL ERROR: CENTRAL_USERNAME secret is missing!"
            echo ""
            echo "üîß HOW TO FIX:"
            echo "   This secret is required for publishing to Maven Central."
            echo "   You need to add it to your repository secrets."
            echo ""
            echo "üìã WHAT TO ADD:"
            echo "   - Your Sonatype OSSRH username (usually your email)"
            echo "   - This is the username you use to log into https://s01.oss.sonatype.org/"
            echo ""
            echo "üîë HOW TO GET ACCESS:"
            echo "   1. Go to https://s01.oss.sonatype.org/"
            echo "   2. Click 'Sign Up' if you don't have an account"
            echo "   3. Complete the registration process"
            echo "   4. Add CENTRAL_USERNAME to repository secrets"
            echo ""
            exit 1
          fi
          
          # Check CENTRAL_PASSWORD
          if [ -z "${{ secrets.CENTRAL_PASSWORD }}" ]; then
            echo ""
            echo "‚ùå CRITICAL ERROR: CENTRAL_PASSWORD secret is missing!"
            echo ""
            echo "üîß HOW TO FIX:"
            echo "   Add CENTRAL_PASSWORD to your repository secrets."
            echo ""
            echo "üìã WHAT TO ADD:"
            echo "   - Your Sonatype OSSRH password"
            echo "   - This is the password you use to log into https://s01.oss.sonatype.org/"
            echo ""
            echo "üîë HOW TO RESET PASSWORD:"
            echo "   1. Go to https://s01.oss.sonatype.org/"
            echo "   2. Click 'Forgot Password?'"
            echo "   3. Follow the password reset process"
            echo "   4. Add the new password to repository secrets"
            echo ""
            exit 1
          fi
          
          echo "‚úÖ Maven Central secrets are present"
          echo "   Username: ${{ secrets.CENTRAL_USERNAME }}"
          echo "   Password: [PRESENT]"
        shell: bash

      - name: '‚úÖ Validate NPM Token'
        if: contains(inputs.project-type, 'npm')
        run: |
          echo "üì¶ Validating NPM configuration..."
          
          # Check NPM_TOKEN
          if [ -z "${{ secrets.NPM_TOKEN }}" ]; then
            echo ""
            echo "‚ùå CRITICAL ERROR: NPM_TOKEN secret is missing!"
            echo ""
            echo "üîß HOW TO FIX:"
            echo "   This secret is required for publishing to NPM registry."
            echo "   You need to add it to your repository secrets."
            echo ""
            echo "üìã WHAT TO ADD:"
            echo "   - Your NPM authentication token"
            echo "   - This is NOT your NPM password"
            echo ""
            echo "üîë HOW TO GET YOUR NPM TOKEN:"
            echo "   1. Go to https://www.npmjs.com/"
            echo "   2. Sign in to your account"
            echo "   3. Click your profile picture > Access Tokens"
            echo "   4. Click 'Generate New Token'"
            echo "   5. Select 'Automation' token type"
            echo "   6. Copy the token and add it to repository secrets"
            echo ""
            exit 1
          fi
          
          echo "‚úÖ NPM token is present"
          echo "   Token: [PRESENT]"
        shell: bash

      - name: '‚úÖ Environment Validation Complete'
        run: |
          echo "=========================================="
          echo "‚úÖ ENVIRONMENT VALIDATION COMPLETE"
          echo "=========================================="
          echo "All required secrets and configurations are present"
          echo "Proceeding with test execution..."
          echo "=========================================="
        shell: bash

  # ========================================================================
  # JOB 2: MATRIX TESTING
  # ========================================================================
  # This job runs tests for each project type (Maven and/or NPM) using
  # GitHub Actions matrix strategy. It only runs for project types that
  # are actually required based on the project-type input.
  test:
    name: 'üß™ Test'
    runs-on: ubuntu-latest
    needs: validate-environment
    strategy:
      matrix:
        # Always include both project types, let the conditional logic handle execution
        project: [maven, npm]
    steps:
      # ====================================================================
      # STEP 1: CHECKOUT CODE
      # ====================================================================
      # Checkout the repository code for testing
      - name: 'Checkout code'
        uses: actions/checkout@v4

      # ====================================================================
      # STEP 2: SETUP JAVA (MAVEN PROJECTS)
      # ====================================================================
      # Setup Java environment for Maven projects
      # - Installs specified Java version
      # - Configures Maven with caching for performance
      - name: 'Setup Java'
        if: matrix.project == 'maven' && contains(inputs.project-type, 'maven')
        uses: actions/setup-java@v4
        with:
          java-version: ${{ inputs.java-version }}
          distribution: 'temurin'
          cache: 'maven'
          cache-dependency-path: ${{ inputs.maven-working-directory }}/pom.xml

      # ====================================================================
      # STEP 3: SETUP NODE.JS (NPM PROJECTS)
      # ====================================================================
      # Setup Node.js environment for NPM projects
      # - Installs specified Node.js version
      # - Configures NPM with caching for performance
      - name: 'Setup Node.js'
        if: matrix.project == 'npm' && contains(inputs.project-type, 'npm')
        uses: actions/setup-node@v4
        with:
          node-version: ${{ inputs.node-version }}
          cache: 'npm'
          cache-dependency-path: ${{ inputs.npm-working-directory }}/package-lock.json

      # ====================================================================
      # STEP 4: TEST MAVEN PROJECT
      # ====================================================================
      # Executes Maven testing lifecycle
      # - Runs 'mvn clean test' with specified arguments
      # - Generates test reports and coverage
      # - Fails fast if any tests fail
      - name: 'Test Maven Project'
        if: matrix.project == 'maven' && contains(inputs.project-type, 'maven')
        working-directory: ${{ inputs.maven-working-directory }}
        run: |
          echo "üß™ Testing Maven project..."
          mvn clean test -B ${{ inputs.maven-args }}
          echo "‚úÖ Maven tests completed"

      # ====================================================================
      # STEP 5: TEST NPM PROJECT
      # ====================================================================
      # Executes NPM testing workflow
      # - Installs dependencies with 'npm ci'
      # - Runs linting with 'npm run lint'
      # - Executes tests with 'npm test'
      # - Generates coverage reports
      - name: 'Test NPM Project'
        if: matrix.project == 'npm' && contains(inputs.project-type, 'npm')
        working-directory: ${{ inputs.npm-working-directory }}
        run: |
          echo "üß™ Testing NPM project..."
          npm ci
          npm run lint
          npm test
          echo "‚úÖ NPM tests completed"

      # ====================================================================
      # STEP 6: UPLOAD MAVEN TEST RESULTS
      # ====================================================================
      # Uploads Maven test results as artifacts
      # - Collects Surefire test reports
      # - Stores as CircleCI artifacts for analysis
      # - Continues even if no reports found (warn mode)
      - name: 'Upload Test Results'
        if: matrix.project == 'maven' && contains(inputs.project-type, 'maven')
        uses: actions/upload-artifact@v4
        with:
          name: maven-test-results
          path: ${{ inputs.maven-working-directory }}/target/surefire-reports/
          if-no-files-found: warn

      # ====================================================================
      # STEP 7: UPLOAD NPM COVERAGE REPORTS
      # ====================================================================
      # Uploads NPM coverage reports as artifacts
      # - Collects coverage reports from Jest
      # - Stores as CircleCI artifacts for analysis
      # - Continues even if no reports found (warn mode)
      - name: 'Upload Coverage Reports'
        if: matrix.project == 'npm' && contains(inputs.project-type, 'npm')
        uses: actions/upload-artifact@v4
        with:
          name: npm-coverage-reports
          path: ${{ inputs.npm-working-directory }}/coverage/
          if-no-files-found: warn
