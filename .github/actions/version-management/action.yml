# =============================================================================
# VERSION MANAGEMENT COMPOSITE ACTION
# =============================================================================
# This action handles version management using the calculate-version.sh script
# - Downloads the script from the library repository
# - Runs version calculation for Maven and/or NPM projects
# - Sets outputs for use by calling workflows
#
# USAGE:
#   - name: 'Version Management'
#     uses: ./.github/actions/version-management
#     with:
#       project-type: 'maven'        # maven, npm, or hybrid
#       java-version: '17'          # Java version for Maven projects
#       node-version: '18'          # Node.js version for NPM projects
#       maven-working-directory: '.' # Working directory for Maven project
#       npm-working-directory: '.'   # Working directory for NPM project
#
# INPUTS:
#   - project-type: Type of project (maven, npm, or hybrid)
#   - java-version: Java version to use
#   - node-version: Node.js version to use
#   - maven-working-directory: Working directory for Maven project
#   - npm-working-directory: Working directory for NPM project
#
# OUTPUTS:
#   - maven-version: New Maven version
#   - npm-version: New NPM version
#   - old-version: Previous version
#   - new-version: New version
# =============================================================================

name: 'Version Management'
description: 'Manages version calculation and updates using calculate-version.sh script'

inputs:
  project-type:
    description: 'Type of project (maven, npm, or hybrid)'
    required: true
  java-version:
    description: 'Java version to use'
    required: false
    default: '17'
  node-version:
    description: 'Node.js version to use'
    required: false
    default: '18'
  maven-working-directory:
    description: 'Working directory for Maven project'
    required: false
    default: '.'
  npm-working-directory:
    description: 'Working directory for NPM project'
    required: false
    default: '.'

outputs:
  maven-version:
    description: 'New Maven version'
    value: ${{ steps.version-calc.outputs.maven-version }}
  npm-version:
    description: 'New NPM version'
    value: ${{ steps.version-calc.outputs.npm-version }}
  old-version:
    description: 'Previous version'
    value: ${{ steps.version-calc.outputs.old-version }}
  new-version:
    description: 'New version'
    value: ${{ steps.version-calc.outputs.new-version }}

runs:
  using: 'composite'
  steps:
    - name: 'Setup Java for Maven'
      if: contains(inputs.project-type, 'maven')
      uses: actions/setup-java@v4
      with:
        java-version: ${{ inputs.java-version }}
        distribution: 'temurin'

    - name: 'Setup Node.js for NPM'
      if: contains(inputs.project-type, 'npm')
      uses: actions/setup-node@v4
      with:
        node-version: ${{ inputs.node-version }}

    - name: 'Calculate Versions'
      id: version-calc
      shell: bash
      run: |
        echo "📝 Calculating versions using calculate-version.sh..."
        
        # Run version calculation for Maven projects
        if [[ "${{ inputs.project-type }}" == "maven" ]] || [[ "${{ inputs.project-type }}" == "hybrid" ]]; then
          # Get old version from Maven project
          cd ${{ inputs.maven-working-directory }}
          OLD_VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
          echo "Old Maven version: $OLD_VERSION"
          
          # Run calculate-version.sh from the library repository
          echo "Running calculate-version.sh from library repository..."
          curl -s https://raw.githubusercontent.com/Kingsrook/github-actions-library/main/scripts/calculate-version.sh > calculate-version.sh
          chmod +x calculate-version.sh
          
          # Debug: Check if script was downloaded and is executable
          echo "Script downloaded, size: $(wc -c < calculate-version.sh)"
          echo "Script executable: $(ls -la calculate-version.sh)"
          
          # Run the script with better error handling
          echo "Executing calculate-version.sh..."
          if ./calculate-version.sh --verbose --output-format json > version-output.json 2>script-errors.log; then
            echo "Script executed successfully"
            echo "Script output size: $(wc -c < version-output.json)"
            echo "Script output preview:"
            head -5 version-output.json
            echo "Script errors (if any):"
            cat script-errors.log
          else
            echo "Script failed with exit code $?"
            echo "Script errors:"
            cat script-errors.log
            echo "Script output (if any):"
            cat version-output.json
            exit 1
          fi
          
          # Parse JSON output
          NEW_VERSION=$(cat version-output.json | jq -r '.new_version')
          echo "New Maven version: $NEW_VERSION"
          
          # Set outputs
          echo "maven-version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "old-version=$OLD_VERSION" >> $GITHUB_OUTPUT
          echo "new-version=$NEW_VERSION" >> $GITHUB_OUTPUT
          
          cd $GITHUB_WORKSPACE
        fi
        
        # Handle NPM projects
        if [[ "${{ inputs.project-type }}" == "npm" ]] || [[ "${{ inputs.project-type }}" == "hybrid" ]]; then
          cd ${{ inputs.npm-working-directory }}
          
          # Get old version
          OLD_VERSION=$(node -p "require('./package.json').version")
          echo "Old NPM version: $OLD_VERSION"
          
          # For NPM, we'll use the same version logic but apply it to package.json
          # This is a simplified approach - in practice, you might want a separate NPM script
          if [[ -n "$NEW_VERSION" ]]; then
            npm version $NEW_VERSION --no-git-tag-version
            echo "npm-version=$NEW_VERSION" >> $GITHUB_OUTPUT
          fi
          
          cd ../..
        fi
