# =============================================================================
# VERSION MANAGEMENT COMPOSITE ACTION
# =============================================================================
# This action provides standardized version management for Maven and NPM projects.
# It handles version calculation, updating, and synchronization between build systems.
#
# USAGE:
#   - name: 'üìä Manage Versions'
#     uses: ./.github/actions/version-management
#     with:
#       project-type: 'hybrid'
#       version: '1.2.3'
#       operation: 'set'
#       sync-versions: true
#
# INPUTS:
#   - project-type: 'maven', 'npm', or 'hybrid'
#   - version: Version to set (required for 'set' operation)
#   - operation: 'get', 'set', 'bump', or 'calculate'
#   - bump-type: 'patch', 'minor', 'major' (for bump operation)
#   - base-version: Base version for calculations (e.g., from branch)
#   - sync-versions: Whether to sync versions between Maven and NPM
#   - commit-changes: Whether to commit version changes to Git
#   - commit-message: Custom commit message for version changes
#
# OUTPUTS:
#   - maven-version: Current Maven version
#   - npm-version: Current NPM version
#   - calculated-version: Calculated version based on operation
#   - version-changed: Whether any version was changed
# =============================================================================

name: 'Version Management'
description: 'Manages versions for Maven and NPM projects with synchronization support'

inputs:
  project-type:
    description: 'Type of project (maven, npm, or hybrid)'
    required: true
    default: 'hybrid'
  version:
    description: 'Version to set (required for set operation)'
    required: false
    default: ''
  operation:
    description: 'Operation to perform (get, set, bump, calculate)'
    required: false
    default: 'get'
  bump-type:
    description: 'Type of version bump (patch, minor, major)'
    required: false
    default: 'patch'
  base-version:
    description: 'Base version for calculations'
    required: false
    default: ''
  sync-versions:
    description: 'Whether to sync versions between Maven and NPM'
    required: false
    default: 'false'
  commit-changes:
    description: 'Whether to commit version changes to Git'
    required: false
    default: 'false'
  commit-message:
    description: 'Custom commit message for version changes'
    required: false
    default: ''

outputs:
  maven-version:
    description: 'Current Maven version'
    value: ${{ steps.version-info.outputs.maven-version }}
  npm-version:
    description: 'Current NPM version'
    value: ${{ steps.version-info.outputs.npm-version }}
  calculated-version:
    description: 'Calculated version based on operation'
    value: ${{ steps.version-info.outputs.calculated-version }}
  version-changed:
    description: 'Whether any version was changed'
    value: ${{ steps.version-info.outputs.version-changed }}

runs:
  using: 'composite'
  steps:
    - name: 'üîç Get Current Versions'
      id: version-info
      shell: bash
      run: |
        echo "üîç Getting current versions..."
        
        MAVEN_VERSION=""
        NPM_VERSION=""
        CALCULATED_VERSION=""
        VERSION_CHANGED="false"
        
        # Get Maven version if applicable
        if [ "${{ inputs.project-type }}" = "maven" ] || [ "${{ inputs.project-type }}" = "hybrid" ]; then
          if [ -f "pom.xml" ]; then
            MAVEN_VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
            echo "‚òï Current Maven version: ${MAVEN_VERSION}"
          else
            echo "‚ö†Ô∏è pom.xml not found for Maven project"
          fi
        fi
        
        # Get NPM version if applicable
        if [ "${{ inputs.project-type }}" = "npm" ] || [ "${{ inputs.project-type }}" = "hybrid" ]; then
          if [ -f "package.json" ]; then
            NPM_VERSION=$(node -p "require('./package.json').version")
            echo "üì¶ Current NPM version: ${NPM_VERSION}"
          else
            echo "‚ö†Ô∏è package.json not found for NPM project"
          fi
        fi
        
        # Set outputs
        echo "maven-version=${MAVEN_VERSION}" >> $GITHUB_OUTPUT
        echo "npm-version=${NPM_VERSION}" >> $GITHUB_OUTPUT
        echo "calculated-version=${CALCULATED_VERSION}" >> $GITHUB_OUTPUT
        echo "version-changed=${VERSION_CHANGED}" >> $GITHUB_OUTPUT

    - name: 'üìä Calculate Version'
      if: inputs.operation == 'calculate' && inputs.base-version != ''
      shell: bash
      run: |
        echo "üìä Calculating version from base: ${{ inputs.base-version }}"
        
        BASE_VERSION="${{ inputs.base-version }}"
        BUMP_TYPE="${{ inputs.bump-type }}"
        
        # Parse version components (e.g., 1.2.3 -> 1, 2, 3)
        IFS='.' read -r MAJOR MINOR PATCH <<< "$BASE_VERSION"
        
        # Apply bump based on type
        case "$BUMP_TYPE" in
          "patch")
            NEW_PATCH=$((PATCH + 1))
            CALCULATED_VERSION="${MAJOR}.${MINOR}.${NEW_PATCH}"
            ;;
          "minor")
            NEW_MINOR=$((MINOR + 1))
            CALCULATED_VERSION="${MAJOR}.${NEW_MINOR}.0"
            ;;
          "major")
            NEW_MAJOR=$((MAJOR + 1))
            CALCULATED_VERSION="${NEW_MAJOR}.0.0"
            ;;
          *)
            echo "‚ùå Invalid bump type: $BUMP_TYPE"
            echo "Valid types: patch, minor, major"
            exit 1
            ;;
        esac
        
        echo "üéØ Calculated version: ${CALCULATED_VERSION} (${BUMP_TYPE} increment from ${BASE_VERSION})"
        
        # Update outputs
        echo "calculated-version=${CALCULATED_VERSION}" >> $GITHUB_OUTPUT

    - name: 'üìù Set Maven Version'
      if: (inputs.operation == 'set' || inputs.operation == 'bump') && (inputs.project-type == 'maven' || inputs.project-type == 'hybrid') && contains(fileExists('pom.xml'), 'true')
      shell: bash
      run: |
        echo "üìù Setting Maven version..."
        
        if [ "${{ inputs.operation }}" = "set" ]; then
          NEW_VERSION="${{ inputs.version }}"
        elif [ "${{ inputs.operation }}" = "bump" ]; then
          # Get current version and bump it
          CURRENT_VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
          BASE_VERSION=$(echo "$CURRENT_VERSION" | sed 's/-SNAPSHOT$//')
          
          # Parse and bump version
          IFS='.' read -r MAJOR MINOR PATCH <<< "$BASE_VERSION"
          BUMP_TYPE="${{ inputs.bump-type }}"
          
          case "$BUMP_TYPE" in
            "patch")
              NEW_PATCH=$((PATCH + 1))
              NEW_VERSION="${MAJOR}.${MINOR}.${NEW_PATCH}"
              ;;
            "minor")
              NEW_MINOR=$((MINOR + 1))
              NEW_VERSION="${MAJOR}.${NEW_MINOR}.0"
              ;;
            "major")
              NEW_MAJOR=$((MAJOR + 1))
              NEW_VERSION="${NEW_MAJOR}.0.0"
              ;;
          esac
        fi
        
        echo "üöÄ Setting Maven version to: ${NEW_VERSION}"
        mvn versions:set -DnewVersion="${NEW_VERSION}" -DgenerateBackupPoms=false
        
        # Update output
        echo "calculated-version=${NEW_VERSION}" >> $GITHUB_OUTPUT
        echo "version-changed=true" >> $GITHUB_OUTPUT

    - name: 'üìù Set NPM Version'
      if: (inputs.operation == 'set' || inputs.operation == 'bump') && (inputs.project-type == 'npm' || inputs.project-type == 'hybrid') && contains(fileExists('package.json'), 'true')
      shell: bash
      run: |
        echo "üìù Setting NPM version..."
        
        if [ "${{ inputs.operation }}" = "set" ]; then
          NEW_VERSION="${{ inputs.version }}"
        elif [ "${{ inputs.operation }}" = "bump" ]; then
          # Get current version and bump it
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          BASE_VERSION=$(echo "$CURRENT_VERSION" | sed 's/-SNAPSHOT$//')
          
          # Parse and bump version
          IFS='.' read -r MAJOR MINOR PATCH <<< "$BASE_VERSION"
          BUMP_TYPE="${{ inputs.bump-type }}"
          
          case "$BUMP_TYPE" in
            "patch")
              NEW_PATCH=$((PATCH + 1))
              NEW_VERSION="${MAJOR}.${MINOR}.${NEW_PATCH}"
              ;;
            "minor")
              NEW_MINOR=$((MINOR + 1))
              NEW_VERSION="${MAJOR}.${NEW_MINOR}.0"
              ;;
            "major")
              NEW_MAJOR=$((MAJOR + 1))
              NEW_VERSION="${NEW_MAJOR}.0.0"
              ;;
          esac
        fi
        
        echo "üöÄ Setting NPM version to: ${NEW_VERSION}"
        npm version "${NEW_VERSION}" --no-git-tag-version
        
        # Update output
        echo "calculated-version=${NEW_VERSION}" >> $GITHUB_OUTPUT
        echo "version-changed=true" >> $GITHUB_OUTPUT

    - name: 'üîÑ Sync Versions Between Maven and NPM'
      if: inputs.sync-versions == 'true' && inputs.project-type == 'hybrid'
      shell: bash
      run: |
        echo "üîÑ Syncing versions between Maven and NPM..."
        
        if [ -f "pom.xml" ] && [ -f "package.json" ]; then
          # Get Maven version as source of truth
          MAVEN_VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
          echo "‚òï Maven version (source): ${MAVEN_VERSION}"
          
          # Update NPM to match Maven
          npm version "${MAVEN_VERSION}" --no-git-tag-version
          echo "üì¶ NPM version synced to: ${MAVEN_VERSION}"
          
          # Update outputs
          echo "calculated-version=${MAVEN_VERSION}" >> $GITHUB_OUTPUT
          echo "version-changed=true" >> $GITHUB_OUTPUT
        else
          echo "‚ö†Ô∏è Cannot sync versions: both pom.xml and package.json required"
        fi

    - name: 'üìù Commit Version Changes'
      if: inputs.commit-changes == 'true'
      shell: bash
      run: |
        echo "üìù Committing version changes..."
        
        # Configure Git
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        
        # Add all changes
        git add .
        
        # Check if there are changes to commit
        if [ -n "$(git status --porcelain)" ]; then
          COMMIT_MSG="${{ inputs.commit-message }}"
          if [ -z "$COMMIT_MSG" ]; then
            COMMIT_MSG="üìä Update versions"
          fi
          
          git commit -m "$COMMIT_MSG"
          git push origin ${{ github.ref_name }}
          echo "‚úÖ Version changes committed and pushed"
        else
          echo "‚ÑπÔ∏è No version changes to commit"
        fi

    - name: 'üìã Version Management Summary'
      shell: bash
      run: |
        echo "üìã Version Management Summary"
        echo "================================"
        echo "Project Type: ${{ inputs.project-type }}"
        echo "Operation: ${{ inputs.operation }}"
        echo "Maven Version: ${{ steps.version-info.outputs.maven-version || 'N/A' }}"
        echo "NPM Version: ${{ steps.version-info.outputs.npm-version || 'N/A' }}"
        echo "Calculated Version: ${{ steps.version-info.outputs.calculated-version || 'N/A' }}"
        echo "Version Changed: ${{ steps.version-info.outputs.version-changed || 'false' }}"
        echo "Versions Synced: ${{ inputs.sync-versions }}"
        echo "Changes Committed: ${{ inputs.commit-changes }}"
