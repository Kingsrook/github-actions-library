# =============================================================================
# ENVIRONMENT VALIDATION ACTION
# =============================================================================
# This action validates all required environment variables, secrets, and 
# configurations for CI/CD pipelines. It's designed to fail fast if there are
# any authentication or configuration issues, saving time and providing clear
# error messages.
#
# USAGE:
#   - uses: ./.github/actions/validate-environment
#   - with:
#       project-type: 'hybrid'        # maven, npm, or hybrid
#       require-github-token: true    # Whether GitHub token is required
#       require-gpg: true            # Whether GPG signing is required
#       require-maven: true          # Whether Maven Central publishing is required
#       require-npm: true            # Whether NPM publishing is required
#
# VALIDATION STEPS:
#   1. GitHub Token - Validates GitHub API access and permissions
#   2. GPG Configuration - Tests GPG key import and signing capability
#   3. Maven Central - Validates Maven Central credentials and connectivity
#   4. NPM Configuration - Tests NPM authentication and registry access
#   5. Repository Access - Verifies repository access and permissions
#   6. Git Configuration - Sets up Git identity and repository validation
#   7. Build Tools - Checks availability of Java, Maven, Node.js, NPM
#   8. Project Files - Validates presence of required project files
# =============================================================================

name: 'Validate Environment & Secrets'
description: 'Validates all required environment variables, secrets, and configurations for CI/CD pipeline'

inputs:
  project-type:
    description: 'Type of project (maven, npm, or hybrid)'
    required: true
    default: 'hybrid'
  require-github-token:
    description: 'Whether GitHub token is required for this workflow'
    required: false
    default: 'true'
  require-gpg:
    description: 'Whether GPG signing is required'
    required: false
    default: 'true'
  require-maven:
    description: 'Whether Maven Central publishing is required'
    required: false
    default: 'true'
  require-npm:
    description: 'Whether NPM publishing is required'
    required: false
    default: 'true'

runs:
  using: 'composite'
  steps:
    # ========================================================================
    # STEP 1: VALIDATION STARTED
    # ========================================================================
    # Displays comprehensive information about what will be validated
    # based on the project type and requirements specified
    - name: 'üîç Environment Validation Started'
      run: |
        echo "=========================================="
        echo "üîç ENVIRONMENT VALIDATION STARTED"
        echo "=========================================="
        echo "Project Type: ${{ inputs.project-type }}"
        echo "GitHub Token Required: ${{ inputs.require-github-token }}"
        echo "GPG Required: ${{ inputs.require-gpg }}"
        echo "Maven Required: ${{ inputs.require-maven }}"
        echo "NPM Required: ${{ inputs.require-npm }}"
        echo "=========================================="
      shell: bash

    # ========================================================================
    # STEP 2: GITHUB TOKEN VALIDATION
    # ========================================================================
    # Validates the GitHub token by:
    # - Checking if GITHUB_TOKEN is set
    # - Testing API access to GitHub
    # - Displaying user information and permissions
    # This step is critical for repository access and API operations
    - name: '‚úÖ Check GitHub Token'
      if: inputs.require-github-token == 'true'
      run: |
        # Check if GitHub token is present
        if [ -z "${{ secrets.GITHUB_TOKEN }}" ]; then
          echo "‚ùå ERROR: GITHUB_TOKEN is not set"
          exit 1
        fi
        
        # Test GitHub API access by calling the user endpoint
        echo "üîë Testing GitHub API access..."
        response=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
          "https://api.github.com/user" 2>/dev/null || echo "FAILED")
        
        # Validate the response and check for authentication errors
        if [[ "$response" == "FAILED" ]] || [[ "$response" == *"Bad credentials"* ]]; then
          echo "‚ùå ERROR: GitHub token is invalid or expired"
          exit 1
        fi
        
        # Display successful authentication information
        echo "‚úÖ GitHub token is valid and working"
        echo "   User: $(echo "$response" | jq -r '.login // "unknown"')"
        echo "   Permissions: $(echo "$response" | jq -r '.permissions // "unknown"')"
      shell: bash

    # ========================================================================
    # STEP 3: GPG CONFIGURATION VALIDATION
    # ========================================================================
    # Sets up and validates GPG signing capability by:
    # - Checking all required GPG secrets are present
    # - Importing the GPG private key
    # - Testing actual signing functionality
    # This ensures artifacts can be properly signed for security
    - name: '‚úÖ Check GPG Configuration'
      if: inputs.require-gpg == 'true'
      run: |
        echo "üîê Validating GPG configuration..."
        
        # Validate all required GPG secrets are present
        if [ -z "${{ secrets.GPG_PRIVATE_KEY_B64 }}" ]; then
          echo "‚ùå ERROR: GPG_PRIVATE_KEY_B64 is not set"
          exit 1
        fi
        
        if [ -z "${{ secrets.GPG_KEYNAME }}" ]; then
          echo "‚ùå ERROR: GPG_KEYNAME is not set"
          exit 1
        fi
        
        if [ -z "${{ secrets.GPG_PASSPHRASE }}" ]; then
          echo "‚ùå ERROR: GPG_PASSPHRASE is not set"
          exit 1
        fi
        
        echo "‚úÖ GPG secrets are present"
        echo "   Key Name: ${{ secrets.GPG_KEYNAME }}"
        echo "   Private Key: [PRESENT]"
        echo "   Passphrase: [PRESENT]"
        
        # Set up GPG environment for CI/CD
        echo "üîê Testing GPG functionality..."
        mkdir -p ~/.gnupg
        echo 'pinentry-mode loopback' > ~/.gnupg/gpg.conf
        chmod 600 ~/.gnupg/gpg.conf
        
        # Import the base64-encoded private key
        echo "${{ secrets.GPG_PRIVATE_KEY_B64 }}" | tr -d ' \r\n\t' | base64 -d | gpg --batch --import
        
        # Test actual signing capability with a simple test message
        echo "test" | gpg --batch --sign --armor --local-user "${{ secrets.GPG_KEYNAME }}" --passphrase "${{ secrets.GPG_PASSPHRASE }}" > /dev/null
        
        # Verify signing was successful
        if [ $? -eq 0 ]; then
          echo "‚úÖ GPG signing is working correctly"
        else
          echo "‚ùå ERROR: GPG signing test failed"
          exit 1
        fi
      shell: bash

    # ========================================================================
    # STEP 4: MAVEN CENTRAL CONFIGURATION VALIDATION
    # ========================================================================
    # Validates Maven Central publishing configuration by:
    # - Checking Maven Central credentials are present
    # - Testing connectivity to Maven Central servers
    # This ensures Maven artifacts can be published successfully
    - name: '‚úÖ Check Maven Central Configuration'
      if: inputs.require-maven == 'true'
      run: |
        echo "üì¶ Validating Maven Central configuration..."
        
        # Check required Maven Central secrets
        if [ -z "${{ secrets.CENTRAL_USERNAME }}" ]; then
          echo "‚ùå ERROR: CENTRAL_USERNAME is not set"
          exit 1
        fi
        
        if [ -z "${{ secrets.CENTRAL_PASSWORD }}" ]; then
          echo "‚ùå ERROR: CENTRAL_PASSWORD is not set"
          exit 1
        fi
        
        echo "‚úÖ Maven Central secrets are present"
        echo "   Username: ${{ secrets.CENTRAL_USERNAME }}"
        echo "   Password: [PRESENT]"
        
        # Test connectivity to Maven Central (without authentication)
        echo "üåê Testing Maven Central connectivity..."
        if curl -s --connect-timeout 10 "https://s01.oss.sonatype.org/" > /dev/null; then
          echo "‚úÖ Maven Central is reachable"
        else
          echo "‚ö†Ô∏è  WARNING: Maven Central connectivity test failed (may be network issue)"
        fi
      shell: bash

    # ========================================================================
    # STEP 5: NPM CONFIGURATION VALIDATION
    # ========================================================================
    # Validates NPM publishing configuration by:
    # - Checking NPM token is present
    # - Testing NPM authentication with the registry
    # This ensures NPM packages can be published successfully
    - name: '‚úÖ Check NPM Configuration'
      if: inputs.require-npm == 'true'
      run: |
        echo "üì¶ Validating NPM configuration..."
        
        # Check required NPM token
        if [ -z "${{ secrets.NPM_TOKEN }}" ]; then
          echo "‚ùå ERROR: NPM_TOKEN is not set"
          exit 1
        fi
        
        echo "‚úÖ NPM token is present"
        echo "   Token: [PRESENT]"
        
        # Test NPM authentication by creating .npmrc and running whoami
        echo "üîë Testing NPM authentication..."
        echo "//registry.npmjs.org/:_authToken=${{ secrets.NPM_TOKEN }}" > ~/.npmrc
        
        # Verify authentication by checking current user
        npm whoami --registry https://registry.npmjs.org/ --userconfig ~/.npmrc
        
        if [ $? -eq 0 ]; then
          echo "‚úÖ NPM authentication is working"
        else
          echo "‚ùå ERROR: NPM authentication failed"
          exit 1
        fi
      shell: bash

    # ========================================================================
    # STEP 6: REPOSITORY ACCESS VALIDATION
    # ========================================================================
    # Validates repository access and permissions by:
    # - Testing access to the current repository
    # - Displaying repository information
    # This ensures the workflow has proper access to the repository
    - name: '‚úÖ Check Repository Access'
      run: |
        echo "üîê Validating repository access..."
        
        # Check if we can access the repository using GitHub API
        if [ -z "${{ secrets.GITHUB_TOKEN }}" ]; then
          echo "‚ö†Ô∏è  WARNING: Cannot test repository access without GITHUB_TOKEN"
        else
          echo "üåê Testing repository access..."
          response=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}" 2>/dev/null || echo "FAILED")
          
          # Validate repository access
          if [[ "$response" == "FAILED" ]] || [[ "$response" == *"Not Found"* ]]; then
            echo "‚ùå ERROR: Cannot access repository ${{ github.repository }}"
            exit 1
          fi
          
          echo "‚úÖ Repository access confirmed"
          echo "   Repository: ${{ github.repository }}"
          echo "   Default Branch: $(echo "$response" | jq -r '.default_branch // "unknown"')"
        fi
      shell: bash

    # ========================================================================
    # STEP 7: GIT CONFIGURATION VALIDATION
    # ========================================================================
    # Sets up and validates Git configuration by:
    # - Setting Git identity for CI/CD operations
    # - Verifying we're in a Git repository
    # - Displaying repository information
    # This ensures Git operations (commits, tags, pushes) work correctly
    - name: '‚úÖ Check Git Configuration'
      run: |
        echo "üîß Validating Git configuration..."
        
        # Set Git identity for CI/CD operations
        git config --global user.email "ci@kingsrook.com"
        git config --global user.name "GitHub Actions CI"
        
        echo "‚úÖ Git configuration set"
        echo "   Email: ci@kingsrook.com"
        echo "   Name: GitHub Actions CI"
        
        # Verify we're in a Git repository
        if [ -d ".git" ]; then
          echo "‚úÖ Git repository detected"
          echo "   Current branch: $(git branch --show-current)"
          echo "   Remote origin: $(git remote get-url origin)"
        else
          echo "‚ùå ERROR: Not in a Git repository"
          exit 1
        fi
      shell: bash

    # ========================================================================
    # STEP 8: BUILD TOOLS VALIDATION
    # ========================================================================
    # Validates availability of required build tools by:
    # - Checking Java and Maven availability (for Maven projects)
    # - Checking Node.js and NPM availability (for NPM projects)
    # - Displaying version information
    # This ensures the build environment is properly configured
    - name: '‚úÖ Check Build Tools'
      run: |
        echo "üõ†Ô∏è  Validating build tools..."
        
        # Check Java/Maven availability for Maven projects
        if [ "${{ inputs.require-maven }}" == "true" ]; then
          if command -v java >/dev/null 2>&1; then
            echo "‚úÖ Java is available: $(java -version 2>&1 | head -n 1)"
          else
            echo "‚ùå ERROR: Java is not available"
            exit 1
          fi
          
          if command -v mvn >/dev/null 2>&1; then
            echo "‚úÖ Maven is available: $(mvn -version 2>&1 | head -n 1)"
          else
            echo "‚ùå ERROR: Maven is not available"
            exit 1
          fi
        fi
        
        # Check Node.js/NPM availability for NPM projects
        if [ "${{ inputs.require-npm }}" == "true" ]; then
          if command -v node >/dev/null 2>&1; then
            echo "‚úÖ Node.js is available: $(node --version)"
          else
            echo "‚ùå ERROR: Node.js is not available"
            exit 1
          fi
          
          if command -v npm >/dev/null 2>&1; then
            echo "‚úÖ NPM is available: $(npm --version)"
          else
            echo "‚ùå ERROR: NPM is not available"
            exit 1
          fi
        fi
        
        echo "‚úÖ All required build tools are available"
      shell: bash

    # ========================================================================
    # STEP 9: PROJECT FILES VALIDATION
    # ========================================================================
    # Validates presence of required project files by:
    # - Checking pom.xml for Maven projects
    # - Checking package.json for NPM projects
    # - Providing warnings for recommended files
    # This ensures the project structure is correct
    - name: '‚úÖ Check Project Files'
      run: |
        echo "üìÅ Validating project files..."
        
        # Check Maven project files
        if [ "${{ inputs.require-maven }}" == "true" ]; then
          if [ -f "pom.xml" ]; then
            echo "‚úÖ pom.xml found"
          else
            echo "‚ùå ERROR: pom.xml not found (required for Maven projects)"
            exit 1
          fi
        fi
        
        # Check NPM project files
        if [ "${{ inputs.require-npm }}" == "true" ]; then
          if [ -f "package.json" ]; then
            echo "‚úÖ package.json found"
          else
            echo "‚ùå ERROR: package.json not found (required for NPM projects)"
            exit 1
          fi
          
          if [ -f "tsconfig.json" ]; then
            echo "‚úÖ tsconfig.json found"
          else
            echo "‚ö†Ô∏è  WARNING: tsconfig.json not found (recommended for TypeScript projects)"
          fi
        fi
        
        echo "‚úÖ Project files validation complete"
      shell: bash

    # ========================================================================
    # STEP 10: VALIDATION COMPLETE
    # ========================================================================
    # Final step that confirms all validations passed
    # Provides clear success message and next steps
    - name: 'üéâ Environment Validation Complete'
      run: |
        echo "=========================================="
        echo "üéâ ENVIRONMENT VALIDATION COMPLETE"
        echo "=========================================="
        echo "‚úÖ All required secrets and configurations are present"
        echo "‚úÖ All authentication tests passed"
        echo "‚úÖ All build tools are available"
        echo "‚úÖ Project files are valid"
        echo "=========================================="
        echo "üöÄ Ready to proceed with CI/CD pipeline!"
        echo "=========================================="
      shell: bash
